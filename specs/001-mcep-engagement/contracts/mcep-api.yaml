openapi: 3.0.3
info:
  title: Multi-Channel Client Engagement Platform (MCEP) API
  description: |
    REST API for Portfolio Managers to manage multi-channel client engagement campaigns.

    **Constitution Alignment**: API-First Design (Principle IV)
    - Contracts before implementation
    - Consumer-driven design based on user scenarios
    - Versioned endpoints (/api/v1/)
  version: 1.0.0
  contact:
    name: Project Equinox
    email: equinox@cpsc436c.ubc.ca

servers:
  - url: https://api.equinox.example.com/api/v1
    description: Production
  - url: https://api-staging.equinox.example.com/api/v1
    description: Staging
  - url: http://localhost:8080/api/v1
    description: Local development

paths:
  /campaigns:
    post:
      summary: Create new campaign
      description: Create a new outreach campaign (FR-002, User Story 1)
      operationId: createCampaign
      tags: [Campaigns]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCampaignRequest'
      responses:
        '201':
          description: Campaign created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      summary: List campaigns
      description: List campaigns for authenticated Portfolio Manager
      operationId: listCampaigns
      tags: [Campaigns]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, scheduled, active, paused, completed]
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Campaign list
          content:
            application/json:
              schema:
                type: object
                properties:
                  campaigns:
                    type: array
                    items:
                      $ref: '#/components/schemas/Campaign'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer

  /messages:
    post:
      summary: Send message
      description: Send message to prospects (FR-001)
      operationId: sendMessage
      tags: [Messages]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '202':
          description: Message queued for delivery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /profiles:
    post:
      summary: Create engagement profile
      description: Create engagement profile for market segment (FR-006, User Story 2)
      operationId: createProfile
      tags: [Profiles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
      responses:
        '201':
          description: Profile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngagementProfile'
        '400':
          $ref: '#/components/responses/BadRequest'

  /webhooks/crm:
    post:
      summary: Register CRM webhook
      description: Register CRM system for lead handoff (FR-011, Clarification #1)
      operationId: registerWebhook
      tags: [Webhooks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRegistration'
      responses:
        '201':
          description: Webhook registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'

components:
  schemas:
    CreateCampaignRequest:
      type: object
      required: [name, target_segment, message_content, profile_ids]
      properties:
        name:
          type: string
          example: "Q4 Crypto Campaign"
        target_segment:
          type: object
          description: Segmentation criteria (JSONB)
        message_content:
          type: string
          maxLength: 1000
        profile_ids:
          type: array
          items:
            type: string
            format: uuid
        launch_time:
          type: string
          format: date-time

    Campaign:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [draft, scheduled, active, paused, completed]
        total_recipients:
          type: integer
        messages_sent:
          type: integer
        messages_delivered:
          type: integer
        created_at:
          type: string
          format: date-time

    SendMessageRequest:
      type: object
      required: [campaign_id, prospect_id, content]
      properties:
        campaign_id:
          type: string
          format: uuid
        prospect_id:
          type: string
          format: uuid
        content:
          type: string

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        delivery_status:
          type: string
          enum: [pending, sent, delivered, failed, retrying]
        platform:
          type: string
          enum: [whatsapp, telegram, signal, imessage]
        retry_count:
          type: integer
          maximum: 3

    CreateProfileRequest:
      type: object
      required: [name, language]
      properties:
        name:
          type: string
        language:
          type: string
          pattern: '^[a-z]{2}$'
        branding_config:
          type: object
        messaging_templates:
          type: object

    EngagementProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        language:
          type: string
        is_active:
          type: boolean

    WebhookRegistration:
      type: object
      required: [url, crm_type]
      properties:
        url:
          type: string
          format: uri
        crm_type:
          type: string
          enum: [salesforce, hubspot, custom]
        secret:
          type: string
          description: HMAC secret for signature validation

    Webhook:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
        crm_type:
          type: string
        created_at:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: array
                items:
                  type: string

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Authentication required"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
